name: PlanetScale

on:
    pull_request:
        branches: '*'

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    branch:
        environment: staging
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
        steps:
            - name: Setup pscale
              uses: planetscale/setup-pscale-action@v1

            - name: Set env.PSCALE_BRANCH_NAME
              run: echo "PSCALE_BRANCH_NAME=$(echo ${{ github.head_ref }} | tr -cd '[:alnum:]-'| tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Create branch
              env:
                  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
                  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
              run: |
                  set +e
                  pscale branch show ${{ vars.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ vars.PLANETSCALE_ORG_NAME }}
                  exit_code=$?
                  set -e


                  if [ $exit_code -eq 0 ]; then
                    echo "Branch exists. Skipping branch creation."
                  else
                    echo "Branch does not exist. Creating."
                    pscale branch create ${{ vars.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --wait --org ${{ vars.PLANETSCALE_ORG_NAME }}
                  fi

            - name: Generate password for branch
              env:
                  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
                  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
              run: |
                  response=$(pscale password create ${{ vars.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} pw-${{ env.PSCALE_BRANCH_NAME }} --ttl 672h -f json --org ${{ vars.PLANETSCALE_ORG_NAME }})

                  id=$(echo "$response" | jq -r '.id')
                  host=$(echo "$response" | jq -r '.access_host_url')
                  username=$(echo "$response" | jq -r '.username')
                  password=$(echo "$response" | jq -r '.plain_text')
                  ssl_mode="verify_identity"  # Assuming a default value for ssl_mode
                  ssl_ca="/etc/ssl/certs/ca-certificates.crt"  # Assuming a default value for ssl_ca

                  # Set the password ID, allows us to later delete it if wanted.
                  echo "PASSWORD_ID=$id" >> $GITHUB_ENV

                  # Create the DATABASE_URL
                  database_url="mysql://$username:$password@$host/${{ vars.PLANETSCALE_DATABASE_NAME }}?sslmode=$ssl_mode&sslca=$ssl_ca"
                  echo "DATABASE_URL=$database_url" >> $GITHUB_ENV
                  echo "::add-mask::$DATABASE_URL"

            - name: Use the DATABASE_URL in a subsequent step
              run: |
                  echo "Using DATABASE_URL: $DATABASE_URL"

            - name: Open DR if migrations
              env:
                  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
                  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
              run: pscale deploy-request create ${{ vars.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ vars.PLANETSCALE_ORG_NAME }}

            - name: Set env.DEPLOY_REQUEST_NUMBER
              env:
                  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
                  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
              run: |
                  deploy_request_number=$(pscale deploy-request show ${{ vars.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ vars.PLANETSCALE_ORG_NAME }} -f json | jq -r '.number')
                  echo "DEPLOY_REQUEST_NUMBER=$deploy_request_number" >> $GITHUB_ENV

            - name: Comment on PR
              env:
                  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
                  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
              run: |
                  echo "Deploy request opened: https://app.planetscale.com/${{ vars.PLANETSCALE_ORG_NAME }}/${{ vars.PLANETSCALE_DATABASE_NAME }}/deploy-requests/${{ env.DEPLOY_REQUEST_NUMBER }}" >> migration-message.txt
                  echo "" >> migration-message.txt
                  echo "\`\`\`diff" >> migration-message.txt
                  pscale deploy-request diff ${{ vars.PLANETSCALE_DATABASE_NAME }} ${{ env.DEPLOY_REQUEST_NUMBER }} --org ${{ vars.PLANETSCALE_ORG_NAME }} -f json | jq -r '.[].raw' >> migration-message.txt
                  echo "\`\`\`" >> migration-message.txt

            - name: Comment PR - db migrated
              uses: thollander/actions-comment-pull-request@v2
              with:
                  filePath: migration-message.txt
